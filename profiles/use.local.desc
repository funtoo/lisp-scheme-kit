# This file is deprecated as per GLEP 56 in favor of metadata.xml. Please add
# your descriptions to your package's metadata.xml ONLY.
# * generated automatically using egencache *

dev-lisp/clisp:hyperspec - Use local hyperspec instead of online version
dev-lisp/clisp:svm - Build CLISP with support for the Support Vector Machine module
dev-lisp/clx:doc - Builds documentation
dev-lisp/cmucl:X - Build CLX, CLM, or Hemlock
dev-lisp/cmucl:doc - Installs package documentation
dev-lisp/cmucl:source - Include source code for CMUCL in installation
dev-lisp/ecls:gengc - Use generational garbage collection (experimental)
dev-lisp/ecls:libatomic - Use dev-libs/libatomic_ops library
dev-lisp/ecls:precisegc - Use type information during garbage collection (experimental)
dev-lisp/gcl:ansi - Build a GCL with ANSI support (else build a traditional CLtL1 image)
dev-lisp/gcl:athena - Build xgcl - an interface to x11-libs/libXaw
dev-lisp/sbcl:pax_kernel - Enable if the user plans to run the package under a pax enabled hardened kernel
dev-scheme/gauche:mbedtls - Enable support for net-libs/mbedtls
dev-scheme/gauche-gl:cg - Enable NVidia Cg binding
dev-scheme/gauche-gtk:glgd - Enable GL graph draw
dev-scheme/guile:debug-freelist - Include garbage collector freelist debugging code
dev-scheme/guile:debug-malloc - Include malloc debugging code
dev-scheme/guile:deprecated - Enable deprecated features
dev-scheme/guile:discouraged - (implied by deprecated) enable merely discouraged features
dev-scheme/guile:networking - Include networking interfaces
dev-scheme/guile:regex - Include regular expression interfaces
dev-scheme/kawa:awt - Assume AWT is available
dev-scheme/kawa:frontend - Build "kawa" front-end program using sys-libs/readline
dev-scheme/kawa:jemacs - Build JEmacs
dev-scheme/kawa:krl - Build BRL emulation and KRL
dev-scheme/kawa:sax - Assume SAX2 is available with dev-java/sax
dev-scheme/kawa:servlets - Build support for generating servlets with Java servletapi
dev-scheme/kawa:swing - Assume Swing is available
dev-scheme/kawa:xqtests - Support XQuery Test Suite
dev-scheme/racket:futures - Enable racket/future library for fine-grained hardware parallelism
dev-scheme/racket:places - Enable racket/place library for share-nothing parallelism and message-passing communication. Compared to futures, places are heavyweight, but they have a simpler performance model.
dev-scheme/racket:threads - Enable support for green threads
dev-scheme/scm:arrays - Support for arrays, uniform-arrays and uniform-vectors.
dev-scheme/scm:bignums - Support for large precision integers.
dev-scheme/scm:cautious - SCM will always check the number of arguments to interpreted closures.
dev-scheme/scm:dynamic-linking - Be able to load compiled files while running.
dev-scheme/scm:engineering-notation - Floats to display in engineering notation (exponents always multiples of 3) instead of scientific notation.
dev-scheme/scm:gsubr - generalized c arguments: for arbitrary (more then 11) arguments to C functions.
dev-scheme/scm:inexact - Support for floating point numbers.
dev-scheme/scm:ioext - Commonly available I/O extensions: line I/O, file positioning, file delete and rename, and directory functions.
dev-scheme/scm:libscm - Build and install libscm.a and related headers
dev-scheme/scm:macro - C level support for hygienic and referentially transparent macros (syntax-rules macros).
dev-scheme/scm:regex - String regular expression matching.
dev-scheme/scm:unix - Support for: nice, acct, lstat, readlink, symlink, mknod and sync.
dev-scheme/slib:gambit - Support for gambit scheme implementation
dev-scheme/slib:scm - Support for scm scheme implementation
